esphome:
  name: test-esp32
  friendly_name: Test ESP32

esp32:
  board: wemos_d1_uno32
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
# api:
#   encryption:
#     key: "PVdUFRmPbE1OjwqIP4ttyrCuYNeCLDcFr0OzXjdJuro="

ota:
  - platform: esphome
    password: "487d2173d916d8be22c8a73367bb29e8"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: 192.168.16.141
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Test-Esp32 Fallback Hotspot"
    password: "e3VbdeOL0lxW"

captive_portal:

mqtt:
  topic_prefix: test_device
  broker: 192.168.16.66
  port: 1883
  discovery: false
  reboot_timeout: 0s
  #username: admin
  #password: redacted
    #discovery_prefix: homea 

globals:
   - id: accumulated_pump_on_time
     type: int
     restore_value: no
     initial_value: '0'

sensor:
  - platform: uptime
    id: uptime_in_seconds
    type: seconds
    name: Uptime Sensor

  - platform: template
    name: "Heartbeat"
    lambda: !lambda |-
      return 1;
    update_interval: 10s    

  # - platform: template
  #   id: "accumulated_pump_on_time"
  #   lambda: !lambda |-
  #       return id(accumulated_pump_on_time).state += id(pump_switch_duty_time).state;
  #   update_interval: 60s   


  - platform: duty_time
    id: pump_switch_duty_time
    name: "Pump Switch Duty Time"
    sensor: pump_switch
    last_time:
      id: dosing_pump_last_turn_on_time
      name: Dosing Pump Last Turn-On Time

  - platform: template
    name: "Dosing Ratio"
    lambda: !lambda |-
       return (id(pump_switch_duty_time).state / id(accumulated_pump_on_time) ) * 100;
    unit_of_measurement : '%'        


binary_sensor:
  - platform: gpio
    id: pump_switch
    name: "Pump Switch"
    icon: "mdi:water-pump"
    pin: 
      number: GPIO04
      inverted: true
      mode:
        input: true
        pullup: true

interval:
  - interval: 1s
    then:
      - lambda: !lambda |-
         id(accumulated_pump_on_time) = id(uptime_in_seconds).state;
        
time:
  - platform: sntp
    timezone: UTC
    on_time:
      - seconds: 0
        minutes: 00
        hours: 6
        days_of_week: MON-FRI
        then:
          - lambda: !lambda |-
             id(accumulated_pump_on_time) = 0;

web_server:
  version: 3
  port: 80
  ota: true
  log: true        
  
button:
  - platform: factory_reset  # Or use switch: platform: factory_reset
    name: "Factory Reset"

  - platform: restart
    name: "Dosing Pump Restart"
